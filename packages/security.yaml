###############################################################################
#   @author         :   Chris Heder (@chrisron95)
#   @date           :   7/26/2022
#   @package        :   Security
#   @description    :   Everything related to security functions.
#
#   @special thanks :   Jeffrey Stone
###############################################################################

alarm_control_panel:
  - platform: manual
    name: Sentry Network
    code: !secret alarm_code
    code_arm_required: false # Don't need code to arm.
    disarm_after_trigger: false # Leave alarm armed after
    arming_time: 30 # The time in seconds of the ‘arming’ state before effecting a state change
    delay_time: 30 # The time in seconds of the ‘pending’ state before triggering the alarm
    trigger_time: 300 # How long the alarm goes off for
    disarmed:
      trigger_time: 0 # Can't be triggered when disarmed
    armed_home:
      arming_time: 0 # The time in seconds of the ‘arming’ state before effecting a state change
      delay_time: 0 # The time in seconds of the ‘pending’ state before triggering the alarm
    armed_night:
      arming_time: 0
      delay_time: 0
    armed_vacation:
      arming_time: 0

group:
  doors:
    name: Doors
    entities:
      - binary_sensor.front_door
      - binary_sensor.sliding_glass_door
      - binary_sensor.garage_door
      - binary_sensor.patio_screen_door
  windows:
    name: Windows
    entities:
      - binary_sensor.bedroom_windows
      - binary_sensor.kitchen_window
      - binary_sensor.lab_windows
  windows_downstairs:
    name: Windows Downstairs
    entities:
      - binary_sensor.kitchen_window
  windows_upstairs:
    name: Windows Upstairs
    entities:
      - binary_sensor.bedroom_windows
      - binary_sensor.lab_windows
  alarm_triggers:
    name: Alarm Triggers
    entities:
      - group.doors
      - group.windows
  alarm_exit_triggers:
    name: Alarm Exit Triggers
    entities:
      - binary_sensor.sliding_glass_door
      - binary_sensor.garage_door
      - binary_sensor.patio_screen_door
      - group.windows
  alarm_bypasses:
    name: Alarm Bypasses
    entities:
      - input_boolean.alarm_bypass_front_door
      - input_boolean.alarm_bypass_sliding_glass_door
      - input_boolean.alarm_bypass_screen_door
      - input_boolean.alarm_bypass_garage_door
      - input_boolean.alarm_bypass_kitchen_window
      - input_boolean.alarm_bypass_bedroom_windows
      - input_boolean.alarm_bypass_lab_window

input_boolean:
  # Main security switch. If this is on, the security is armed.
  # sentry_mode:
  #   name: Sentry Mode
  #   icon: mdi:security
  # Vacation mode is automagically set when we are 3 hours from the house, and turns off when we return.
  # This is used to modify some of the normal automations.
  vacation_mode:
    name: Vacation Mode
    icon: mdi:airplane-takeoff
  # Guest mode is use to modify autoamtions when we have guests.
  # In some cases this prevents security from being set to prevent security alarm going off
  guest_mode:
    name: Guest Mode
    icon: mdi:account-multiple
  # This switch powers the security alarm and gives an easy way to kill the alarm.
  # When it is on, the alarm is going off
  security_alarm:
    name: Security Alarm
    icon: mdi:speaker-wireless
  # This switch powers the fire alarm.
  # When on the fire alarm is going off.
  fire_alarm:
    name: Fire Alarm
    icon: mdi:speaker-wireless
  # This switch turns on if the security system checks that fire when someone tries to arm the system
  # finds a door open, or another condition that would prevent the system from being able to monitor properly.
  lockdown_issue:
    name: Lockdown Issue
    icon: mdi:lock-reset
  # This switch is for whether or not unlocking the front door with a code should disarm the alarm
  alarm_disarm_on_unlock:
    name: Alarm Disarm On Unlock
    icon: mdi:shield-lock-open
  # This switch is to be used in the event of an alarm trigger.
  # It will enable sending a notification for any motion detected within the house.
  alarm_alert_on_all_activity:
    name: Alarm Alert On All Activity
    icon: mdi:shield-search

  #### Alarm Bypasses ####
  alarm_bypass_front_door:
    name: Alarm Bypass Front Door
    icon: mdi:shield-lock-open
  alarm_bypass_sliding_glass_door:
    name: Alarm Bypass Sliding Glass Door
    icon: mdi:shield-lock-open
  alarm_bypass_screen_door:
    name: Alarm Bypass Screen Door
    icon: mdi:shield-lock-open
  alarm_bypass_garage_door:
    name: Alarm Bypass Garage Door
    icon: mdi:shield-lock-open
  alarm_bypass_kitchen_window:
    name: Alarm Bypass Kitchen Window
    icon: mdi:shield-lock-open
  alarm_bypass_bedroom_windows:
    name: Alarm Bypass Bedroom Windows
    icon: mdi:shield-lock-open
  alarm_bypass_lab_window:
    name: Alarm Bypass Lab Window
    icon: mdi:shield-lock-open

input_datetime:
  morning_standby:
    name: Morning Standby
    has_date: false
    has_time: true
  nightly_lockdown:
    name: Nightly Lockdown
    has_date: false
    has_time: true

mqtt:
  sensor:
    - name: front_door_motion_away_count
      state_topic: "house/front_door_motion/away_count"

template:
  - sensor:
      - name: Front Door Last Activity
        state: >
          {% set values = [
            states.binary_sensor.front_door_ring_ding.last_changed,
            states.binary_sensor.front_door.last_changed,
            states.lock.touchscreen_deadbolt_z_wave_plus_frontdoor.last_changed ] %}
          {{ values | max }}
        device_class: timestamp
  - trigger:
      - platform: state
        entity_id: sensor.front_door_last_activity
        id: activity
      - platform: state
        entity_id: sensor.front_door_last_activity
        id: timeout
        for: "00:00:30"
    binary_sensor:
      - name: Front Door Recent Activity
        state: >
          {{ true if trigger.id == "activity" or states("binary_sensor.front_door") == "on" else false }}
  - trigger:
      - platform: state
        entity_id: lock.touchscreen_deadbolt_z_wave_plus_frontdoor
    binary_sensor:
      - name: Exiting Front Door
        state: >
          {{ true if trigger.to_state.state == "unlocked" and states("binary_sensor.front_hall_motion_sensor") == "on" else false }}
  - sensor:
      - name: Alarm Triggers
        state: >
          {%- set open_entities = expand('group.alarm_exit_triggers') | selectattr('state','eq','on') | map(attribute='name') | list -%}
          {%- set bypasses = expand('group.alarm_bypasses') | selectattr('state','eq','on') | map(attribute='name') | list -%}
          {%- set active = namespace(triggers=[]) -%}
          {%- for item in open_entities -%}
            {%- set search = bypasses | select("search", (item | replace("binary_sensor.", ""))) | list -%}
            {%- set active.triggers = active.triggers + [item] if search | count == 0 else active.triggers -%}
          {%- endfor -%}
          {%- set count = active.triggers | count -%}
          {%- if count > 1 -%}
            {{- active.triggers[0:count - 1] | join(", ") -}}
            {{- (' and ' ~ active.triggers[count - 1]) }} are open
          {%- elif count > 0 -%}
            {{- active.triggers[0] }} is open
          {%- else -%}
            Ready
          {%- endif -%}
        attributes:
          active_triggers: >
            {%- set open_entities = expand('group.alarm_exit_triggers') | selectattr('state','eq','on') | map(attribute='name') | list -%}
            {%- set bypasses = expand('group.alarm_bypasses') | selectattr('state','eq','on') | map(attribute='name') | list -%}
            {%- set active = namespace(triggers=[]) -%}
            {%- for item in open_entities -%}
              {%- set search = bypasses | select("search", (item | replace("binary_sensor.", ""))) | list -%}
              {%- set active.triggers = active.triggers + [item] if search | count == 0 else active.triggers -%}
            {%- endfor -%}
            {{ active.triggers }}
          open_count: "{{ state_attr('sensor.alarm_triggers', 'active_triggers') | count }}"

automation:
  #############################################
  # Scheduled Arm / Disarm
  # Disarm around the time people are up
  - id: morning_standby
    alias: Morning Standby
    initial_state: true
    trigger:
      - platform: time
        at: input_datetime.morning_standby
    condition:
      condition: or
      conditions:
        - condition: state
          entity_id: group.family
          state: "home"
        - condition: state
          entity_id: input_boolean.guest_mode
          state: "on"
    action:
      - service: script.standby

  # Secure the house every night if it hasn't been done already, everyone is home, and no guests are over.
  - id: nightly_lockdown
    alias: Nightly Lockdown
    initial_state: true
    trigger:
      - platform: time
        at: input_datetime.nightly_lockdown
    condition:
      - condition: state
        entity_id: group.family
        state: home
      - condition: state
        entity_id: input_boolean.guest_mode
        state: "off"
      - condition: or
        conditions:
          - condition: state
            entity_id: alarm_control_panel.sentry_network
            state: disarmed
          - condition: state
            entity_id: alarm_control_panel.sentry_network
            state: armed_home
    action:
      - service: alarm_control_panel.alarm_arm_night
        entity_id: alarm_control_panel.sentry_network

  - alias: Actionable Door Unlocked Notification
    id: "1642655673695"
    description: ""
    trigger:
      - platform: state
        entity_id: lock.touchscreen_deadbolt_z_wave_plus_frontdoor
        to: unlocked
        for:
          hours: 0
          minutes: 5
          seconds: 0
    condition: []
    action:
      - alias: Set up variables for the actions
        variables:
          action_lock: "{{ 'LOCK_' ~ context.id }}"
      - alias: Ask to lock the front door
        service: notify.mobile_app_chriss_iphone
        data:
          message: The front door has been unlocked for 15 minutes. Want to lock it again?
          data:
            actions:
              - action: "{{ action_lock }}"
                title: Lock
      - alias: Wait for a response
        wait_for_trigger:
          - platform: event
            event_type: mobile_app_notification_action
            event_data:
              action: "{{ action_lock }}"
      - alias: Perform the action
        choose:
          - conditions:
              - condition: template
                value_template: "{{ wait.trigger.event.data.action == action_lock }}"
            sequence:
              - service: lock.lock
                target:
                  entity_id: lock.touchscreen_deadbolt_z_wave_plus_frontdoor
    mode: single

  - alias: Window Notifications
    id: "1642916773044"
    description: ""
    trigger:
      - platform: state
        entity_id: binary_sensor.kitchen_window
        for:
          hours: 0
          minutes: 0
          seconds: 2
        from: "off"
        to: "on"
      - platform: state
        entity_id: binary_sensor.bedroom_windows
        for:
          hours: 0
          minutes: 0
          seconds: 2
        from: "off"
        to: "on"
      - platform: state
        entity_id: binary_sensor.lab_windows
        for:
          hours: 0
          minutes: 0
          seconds: 2
        from: "off"
        to: "on"
      - platform: state
        entity_id: binary_sensor.kitchen_window
        for:
          hours: 0
          minutes: 0
          seconds: 2
        from: "on"
        to: "off"
      - platform: state
        entity_id: binary_sensor.bedroom_windows
        for:
          hours: 0
          minutes: 0
          seconds: 2
        from: "on"
        to: "off"
      - platform: state
        entity_id: binary_sensor.lab_windows
        for:
          hours: 0
          minutes: 0
          seconds: 2
        from: "on"
        to: "off"
    condition:
      - condition: state
        entity_id: input_boolean.window_notifications
        state: "on"
    action:
      - service: notify.tvs
        data:
          title: "{{ trigger.to_state.attributes.friendly_name }}"
          message:
            "{% set states = {\n  'on':'Open',\n  'off':'Closed',\n  } %}\n{{ trigger.to_state.attributes.friendly_name\
            \ }} {{ states[trigger.to_state.state] }}\n"
    mode: single

  - alias: Patio Door Notifications
    id: "1642919890732"
    description: ""
    trigger:
      - platform: state
        entity_id: binary_sensor.sliding_glass_door
        for:
          hours: 0
          minutes: 0
          seconds: 2
        from: "on"
        to: "off"
      - platform: state
        entity_id: binary_sensor.sliding_glass_door
        for:
          hours: 0
          minutes: 0
          seconds: 2
        from: "off"
        to: "on"
    condition:
      - condition: state
        state: "on"
        entity_id: input_boolean.patio_door_notifications
    action:
      - service: notify.tvs
        data:
          title: "{{ trigger.to_state.attributes.friendly_name }}"
          message:
            "{% set states = {\n  'on':'Open',\n  'off':'Closed',\n  } %}\n{{ trigger.to_state.attributes.friendly_name\
            \ }} {{ states[trigger.to_state.state] }}\n"
    mode: single

    #############################################

  # Manual Alarm Automations
  - alias: Alarm Breach Trigger
    id: alarm_breach_trigger
    trigger:
      - platform: state
        entity_id: binary_sensor.front_door
        to: "on"
      - platform: state
        entity_id: binary_sensor.sliding_glass_door
        to: "on"
      - platform: state
        entity_id: binary_sensor.garage_door
        to: "on"
      - platform: state
        entity_id: binary_sensor.kitchen_window
        to: "on"
      - platform: state
        entity_id: binary_sensor.bedroom_windows
        to: "on"
      - platform: state
        entity_id: binary_sensor.lab_windows
        to: "on"
    condition:
      - condition: or
        conditions:
          - condition: state
            entity_id: alarm_control_panel.sentry_network
            state: armed_away
          - condition: state
            entity_id: alarm_control_panel.sentry_network
            state: armed_home
          - condition: state
            entity_id: alarm_control_panel.sentry_network
            state: armed_night
          - condition: state
            entity_id: alarm_control_panel.sentry_network
            state: armed_vacation
    action:
      - choose:
          # Exiting front door when armed in a stay mode
          - conditions:
              - condition: template
                value_template: "{{ states('alarm_control_panel.sentry_network') in ['armed_home', 'armed_night'] and trigger.to_state.entity_id == 'binary_sensor.front_door' and states('binary_sensor.exiting_front_door') == 'on' }}"
            sequence: []
          #### Bypass checks ####
          # Front Door
          - conditions:
              - condition: template
                value_template: "{{ trigger.to_state.entity_id == 'binary_sensor.front_door' and is_state('input_boolean.alarm_bypass_front_door', 'on') }}"
            sequence: []
          # Sliding Glass Door
          - conditions:
              - condition: template
                value_template: "{{ trigger.to_state.entity_id == 'binary_sensor.sliding_glass_door' and is_state('input_boolean.alarm_bypass_sliding_glass_door', 'on') }}"
            sequence: []
          # Garage Door
          - conditions:
              - condition: template
                value_template: "{{ trigger.to_state.entity_id == 'binary_sensor.garage_door' and is_state('input_boolean.alarm_bypass_garage_door', 'on') }}"
            sequence: []
          # Kitchen Window
          - conditions:
              - condition: template
                value_template: "{{ trigger.to_state.entity_id == 'binary_sensor.kitchen_window' and is_state('input_boolean.alarm_bypass_kitchen_window', 'on') }}"
            sequence: []
          # Bedroom Windows
          - conditions:
              - condition: template
                value_template: "{{ trigger.to_state.entity_id == 'binary_sensor.bedroom_windows' and is_state('input_boolean.alarm_bypass_bedroom_windows', 'on') }}"
            sequence: []
          # Lab Windows
          - conditions:
              - condition: template
                value_template: "{{ trigger.to_state.entity_id == 'binary_sensor.lab_windows' and is_state('input_boolean.alarm_bypass_lab_window', 'on') }}"
            sequence: []
        default:
          - service: alarm_control_panel.alarm_trigger
            entity_id: alarm_control_panel.sentry_network

  - alias: Alarm Disarm On Door Unlock
    id: alarm_disarm_on_door_unlock
    trigger:
      - platform: event
        event_type: keymaster_lock_state_changed
        event_data:
          lockname: frontdoor
    condition:
      - condition: template
        value_template: "{{ trigger.event.data.state == 'unlocked' and trigger.event.data.code_slot > 0 }}"
      - condition: state
        entity_id: input_boolean.alarm_disarm_on_unlock
        state: "on"
      - condition: or
        conditions:
          - condition: state
            entity_id: alarm_control_panel.sentry_network
            state: armed_away
          - condition: state
            entity_id: alarm_control_panel.sentry_network
            state: armed_home
          - condition: state
            entity_id: alarm_control_panel.sentry_network
            state: armed_night
          - condition: state
            entity_id: alarm_control_panel.sentry_network
            state: armed_vacation
    action:
      - service: alarm_control_panel.alarm_disarm
        data:
          entity_id: alarm_control_panel.sentry_network
          code: !secret alarm_code
      - service: script.alarm_alert_engine
        data:
          ios: true
          message: "Alarm disarmed by {{ trigger.event.data.code_slot_name }}"

  - alias: Alarm Disarmed
    id: alarm_disarmed
    trigger:
      - platform: state
        entity_id: alarm_control_panel.sentry_network
        to: disarmed
    action:
      - service: input_boolean.turn_off
        entity_id: input_boolean.security_alarm
      - choose:
          - alias: Somebody is detected as being home
            conditions:
              condition: or
              conditions:
                - condition: state
                  entity_id: group.family
                  state: "home"
                - condition: state
                  entity_id: input_boolean.guest_mode
                  state: "on"
            sequence:
              - service: script.alarm_alert_engine
                data:
                  # Alert that Sentry Mode has been disabled
                  vocal: true
                  who: presence
                  voice_message: >
                    {{ [
                    "Barn door protocol has been deactivated.",
                    "I am no longer monitoring the access points. ",
                    "Sentry Mode has been disabled. ",
                    "Header House Shields are down."
                    ] | random }}
                  # Message the state
                  ios: true
                  message: "The alarm has been disarmed at {{ states('sensor.time_date') }}."
        default:
          - service: script.alarm_alert_engine
            data:
              ios: true
              message: "Security System has been disarmed, but I could not validate presence. {{ states('sensor.time_date') }}."

  - alias: Alarm Arming Issue
    id: alarm_arming_issue
    trigger:
      - platform: state
        entity_id: alarm_control_panel.sentry_network
        to: arming
    action:
      - variables:
          open_entities: "{{ states('sensor.alarm_triggers') }}"
          open_count: "{{ state_attr('sensor.alarm_triggers', 'open_count') }}"
          is_are: "{{ ' are ' if open_count | int > 1 or open_entities[-1] == 's' else ' is ' }}"
          it_them: "{{ ' them ' if open_count | int > 1 or open_entities[-1] == 's' else ' it ' }}"
      - if:
          # If any points of entry are open
          - condition: state
            entity_id: group.alarm_exit_triggers
            state: "on"
        then:
          # Cancel arming
          - service: alarm_control_panel.alarm_disarm
            data:
              code: !secret alarm_code
              entity_id: alarm_control_panel.sentry_network
          # Turn on Lockdown Issue input_boolean
          - service: input_boolean.turn_on
            entity_id: input_boolean.lockdown_issue
          # Notify us what is open and to try again
          - service: script.alarm_alert_engine
            data:
              vocal: true
              who: kitchen
              voice_message: >
                {{ [
                  "Wait! ",
                  "Stop! ",
                  "Before you go sir, ",
                  "Just a second sir, ",
                  "Sir, "
                  ] | random -}}
                {{ [
                  "I am unable to engage sentry mode due to the " ~ open_entities ~ " being open",
                  "I cannot engage sentry mode because you have failed to close the " ~ open_entities,
                  "I am incapable of engaging sentry mode as you have failed to close the " ~ open_entities,
                  "The " ~ open_entities ~ is_are ~ "still open. Why don't you go close" ~ it_them ~ "first",
                  "How do you expect me to engage sentry mode with the " ~ open_entities ~ " still open? Go close " ~ it_them,
                  "You do know the " ~ open_entities ~ is_are ~ "still open, right? Close " ~ it_them ~ " first, then we'll try this again.",
                  "I cannot engage sentry mode as the " ~ open_entities ~ is_are ~ "still open. I would close " ~ it_them ~ " myself but you still refuse to give me arms.",
                  "You should try closing the " ~ open_entities ~ " first. It may work better, you know, since I currently cannot engage sentry mode",
                  "Where do you think you're going? The " ~ open_entities ~ is_are ~ " still open. Close " ~ it_them ~ " first then we'll try again."
                  ] | random }}
              ios: true
              message: "Alarm couldn't be armed due to the {{ open_entities }}. Please close {{ it_them }} and try again. {{ states('sensor.time_date') }}"

  - alias: Alarm Arm
    id: alarm_arm
    trigger:
      - platform: state
        entity_id: alarm_control_panel.sentry_network
        to: arming
        for:
          seconds: 1
      - platform: state
        entity_id: alarm_control_panel.sentry_network
        to: armed_home
      - platform: state
        entity_id: alarm_control_panel.sentry_network
        to: armed_away
      - platform: state
        entity_id: alarm_control_panel.sentry_network
        to: armed_away
        for:
          minutes: 10
        id: armed_10_mins
      - platform: state
        entity_id: alarm_control_panel.sentry_network
        to: armed_night
      - platform: state
        entity_id: alarm_control_panel.sentry_network
        to: armed_vacation
    action:
      # If in an armed state and the door is still unlocked, lock it
      - if:
          - condition: template
            value_template: "{{ trigger.to_state.state != 'arming' and states('lock.touchscreen_deadbolt_z_wave_plus_frontdoor') == 'unlocked' }}"
        then:
          - service: lock.lock
            target:
              entity_id: lock.touchscreen_deadbolt_z_wave_plus_frontdoor
      # If in an armed state, reset the front door motion count
      - if:
          - condition: template
            value_template: "{{ trigger.to_state.state != 'arming' }}"
        then:
          - service: script.turn_on
            entity_id: script.reset_front_door_motion_count
      - choose:
          # If arming successfully iniates, reset lockdown issues and alert of the arming
          - alias: Arming
            conditions:
              - condition: template
                value_template: "{{ trigger.to_state.state == 'arming' }}"
            sequence:
              # Turn off Lockdown Issue input_boolean if it was on before
              - service: input_boolean.turn_off
                entity_id: input_boolean.lockdown_issue
              - service: script.alarm_alert_engine
                data:
                  # Say goodbye from the kitchen
                  vocal: true
                  who: kitchen
                  voice_message: >
                    {{ [
                        "Goodbye sir, see you soon. I will monitor the house while you're out.",
                        'Farwell sir, I will guard the house until we meet again.',
                        "Have a great day sir. I'll keep the house safe while you're gone.",
                        'I shall keep the house protected while you are gone.',
                        'Not to worry, I will not throw any parties while you are out.',
                        'I will keep the cats entertained and safe while you are gone',
                        "Very well sir, have a nice day. I'll hold the fort.",
                        'Farewell sir, drive safe'
                        ] | random }}
                  # Message the state
                  ios: true
                  message: "Alarm is arming at {{ states('sensor.time_date') }}."
          # If armed in a stay mode, make an announcement and alert us
          - alias: Armed Home or Night
            conditions:
              - condition: template
                value_template: "{{ trigger.to_state.state in ['armed_home','armed_night'] }}"
            sequence:
              - service: script.alarm_alert_engine
                data:
                  # Alert that the home is secure in the current room
                  vocal: true
                  who: presence
                  voice_message: >
                    {{ [
                    "Barn door protocol has been activated.",
                    "Header House has been secured! ",
                    "Sentry Mode is active. ",
                    "I am now monitoring the doors and will let you know if anyone attempts to access.",
                    "Header House Shields are up."
                    ] | random }}
                  # Message the state
                  ios: true
                  message: "The alarm has been set to {{ trigger.to_state.state | replace('_', ' ') }} mode at {{ states('sensor.time_date') }}.{{ ' Have a good night.' if trigger.to_state.state == armed_night }}"
          # If armed in vacation mode, alert us of the state change
          - alias: Armed Vacation
            conditions:
              - condition: template
                value_template: "{{ trigger.to_state.state == 'armed_vacation' }}"
            sequence:
              - service: script.alarm_alert_engine
                data:
                  ios: true
                  message: "Alarm has been armed in vacation mode at {{ states('sensor.time_date') }}. Enjoy your trip!"
          # If armed away for 10 minutes, check if anyone's still home and set armed_home
          - alias: Armed Away 10 Mins Check For Presence
            conditions:
              - condition: trigger
                id: "armed_10_mins"
            sequence:
              - if:
                  - condition: state
                    entity_id: group.people
                    state: "home"
                then:
                  - service: script.turn_on
                    entity_id: script.arm_stay
                  - service: script.alarm_alert_engine
                    data:
                      vocal: true
                      who: presence
                      voice_message: >
                        {{ [
                            "Well I see you're not going anywhere. I'll just monitor the house in stay mode.",
                            "Oh, you're still here? Let me just cancel that party real quick.",
                            "Still home, I see. Shocker. Well I guess I'll just adjust the sentry mode.",
                            "I see you got very far. I'll just set the sentry mode to stay."
                            ] | random }}
                      ios: true
                      message: "The alarm has been in away mode for 10 minutes but there's still people here. I'm arming in stay mode."
        default:
          # If not in a state already specified (so pretty much only armed_away), just alert with the state
          - service: script.alarm_alert_engine
            data:
              ios: true
              message: "The alarm has been set to {{ trigger.to_state.state | replace('_', ' ') }} mode at {{ states('sensor.time_date') }}."

  - alias: Alarm Pending
    id: alarm_pending
    trigger:
      - platform: state
        entity_id: alarm_control_panel.sentry_network
        id: away
        from: armed_away
        to: pending
      - platform: state
        entity_id: alarm_control_panel.sentry_network
        id: vacation
        from: armed_vacation
        to: pending
    action:
      - service: script.turn_on
        entity_id: script.security_response

  - alias: Alarm Triggered
    id: alarm_triggered
    trigger:
      - platform: state
        entity_id: alarm_control_panel.sentry_network
        to: triggered
    action:
      - service: script.alarm_alert_engine
        data:
          ios: true
          critical: true
          message: "THE ALARM HAS BEEN ACTIVATED AT {{ states('sensor.time_date') }}"
      - service: input_boolean.turn_on
        entity_id: input_boolean.security_alarm

  - alias: Alarm Light Handler
    id: alarm_light_handler
    trigger:
      - platform: state
        entity_id: alarm_control_panel.sentry_network
        to: disarmed
      - platform: state
        entity_id: alarm_control_panel.sentry_network
        to: arming
        for:
          seconds: 2
      - platform: state
        entity_id: alarm_control_panel.sentry_network
        to: armed_away
      - platform: state
        entity_id: alarm_control_panel.sentry_network
        to: armed_vacation
      - platform: state
        entity_id: alarm_control_panel.sentry_network
        to: pending
      - platform: state
        entity_id: alarm_control_panel.sentry_network
        to: triggered
    action:
      - choose:
          # When ARMING, activate 'leaving' scene
          - conditions:
              - condition: template
                value_template: "{{ trigger.to_state.state == 'arming' }}"
            sequence:
              - service: scene.turn_on
                entity_id: scene.leaving
          # When ARMED away or vacation, activate 'all_off' scene
          - conditions:
              - condition: template
                value_template: "{{ trigger.to_state.state in ['armed_away','armed_vacation'] }}"
            sequence:
              - service: scene.turn_on
                entity_id: scene.all_off
          # When alarm is PENDING, activate 'alarm_pending' scene
          - conditions:
              - condition: template
                value_template: "{{ trigger.to_state.state == 'pending' }}"
            sequence:
              - service: scene.create
                data:
                  scene_id: alarm_before
                  snapshot_entities:
                    - light.front_hall_light
                    - light.kitchen_light
                    - light.kitchen_leds
                    - light.fish_tank_leds
                    - light.couch_leds
                    - select.couch_leds_playlist_2
                    - select.couch_leds_preset_2
                    - light.curtain_leds
                    - light.living_room_tv_backlights
                    - select.living_room_tv_backlights_playlist
                    - select.living_room_tv_backlights_preset
                    - light.fish_tank_backlights
                    - select.fish_tank_backlights_playlist_2
                    - select.fish_tank_backlights_preset_2
                    - light.dining_room_light
                    - light.francis_s_light
                    - light.patio_light
                    - light.patio_string_lights
                    - light.hallway_light
                    - light.bedroom_fan_lights
                    - light.hue_color_lamp_1
                    - light.lab_fan_light
                    - light.living_room_fan_light
                    - light.western_electric_cabinet_lights
                    - group.floods
                    - light.patio_ring_light
              - service: scene.turn_on
                entity_id: scene.alarm_pending
          # When alarm has been TRIGGERED, activate 'alarm_triggered' scene
          - conditions:
              - condition: template
                value_template: "{{ trigger.to_state.state == 'triggered' }}"
            sequence:
              - service: scene.turn_on
                entity_id: scene.alarm_triggered
          # If DISARMED from 'triggered', 'pending', or 'arming', activate 'arrival' scene
          - conditions:
              - condition: template
                value_template: "{{ trigger.to_state.state == 'disarmed' and trigger.from_state.state in ['triggered','pending','arming'] }}"
            sequence:
              - service: scene.turn_on
                entity_id: scene.alarm_before
              - service: scene.turn_on
                entity_id: scene.arrival

  - alias: Alarm Sound
    id: alarm_sound
    trigger:
      - platform: state
        entity_id: input_boolean.security_alarm
        id: "on"
        to: "on"
      - platform: state
        entity_id: input_boolean.security_alarm
        id: "off"
        to: "off"
    action:
      - choose:
          - conditions:
              - condition: trigger
                id: "on"
            sequence:
              - service: script.alexa_voice
                data:
                  who: everywhere
                  message: The siren has been activated
          - conditions:
              - condition: trigger
                id: "off"
            sequence:
              - service: script.alexa_voice
                data:
                  who: everywhere
                  message: The siren has been deactivated
        default: []

  - alias: Alarm Alert On All Activity
    id: alarm_alert_on_all_activity
    trigger:
      - platform: state
        entity_id: binary_sensor.front_door
        to: "on"
      - platform: state
        entity_id: binary_sensor.sliding_glass_door
        to: "on"
      - platform: state
        entity_id: binary_sensor.garage_door
        to: "on"
      - platform: state
        entity_id: binary_sensor.kitchen_window
        to: "on"
      - platform: state
        entity_id: binary_sensor.bedroom_windows
        to: "on"
      - platform: state
        entity_id: binary_sensor.lab_windows
        to: "on"
      - platform: state
        entity_id: binary_sensor.espresense_bedroom_motion
        to: "on"
      - platform: state
        entity_id: binary_sensor.espresense_lab_motion
        to: "on"
      - platform: state
        entity_id: binary_sensor.espresense_kitchen_motion
        to: "on"
      - platform: state
        entity_id: binary_sensor.espresense_dining_room_motion
        to: "on"
      - platform: state
        entity_id: binary_sensor.espresense_living_room_motion
        to: "on"
      - platform: state
        entity_id: binary_sensor.hallway_motion_sensor
        to: "on"
      - platform: state
        entity_id: binary_sensor.front_hall_motion_sensor
        to: "on"
    condition:
      - condition: state
        entity_id: binary_sensor.alarm_alert_on_all_activity
        state: "on"
    action:
      - service: script.alarm_alert_engine
        data:
          ios: true
          message: "{%- if 'motion' in trigger.to_state.entity_id -%}{{ trigger.to_state.name }} detected motion{%- else -%}{{ trigger.to_state.name }} was opened{%- endif -%} at {{ states('sensor.time_date') }}"

script:
  # Called when security is to be disarmed, clears any alarms or issues as well
  standby:
    sequence:
      # Disarm the alarm
      - service: script.turn_on
        entity_id: script.disarm_security
      # End any vacation if family is back home
      - if:
          - condition: state
            entity_id: group.family
            state: "home"
        then:
          - service: script.turn_on
            entity_id: script.vacation_canceled
      # Turn off the security alarm
      - service: script.turn_on
        entity_id: script.cancel_security_alarm
      # Clear any issues
      - service: script.turn_on
        entity_id: script.cancel_lockdown_issue
      # Activate indoor motion lights
      - service: input_boolean.turn_on
        entity_id: input_boolean.motion_lights_master

  # If vacation mode is on, turn it off
  vacation_canceled:
    sequence:
      - condition: state
        entity_id: input_boolean.vacation_mode
        state: "on"
      - data:
          entity_id: input_boolean.vacation_mode
        service: input_boolean.turn_off

  # Arm home or night depending on time of day
  arm_stay:
    sequence:
      - if:
          # If overnight
          - condition: time
            after: input_datetime.nightly_lockdown
            before: input_datetime.morning_standby
        then:
          - service: alarm_control_panel.alarm_arm_night
            entity_id: alarm_control_panel.sentry_network
        else:
          - service: alarm_control_panel.alarm_arm_home
            entity_id: alarm_control_panel.sentry_network

  # If security is armed, disarm it
  disarm_security:
    sequence:
      - service: alarm_control_panel.alarm_disarm
        data:
          entity_id: alarm_control_panel.sentry_network
          code: !secret alarm_code

  # If alarm is on, turn it off
  cancel_security_alarm:
    sequence:
      - condition: state
        entity_id: input_boolean.security_alarm
        state: "on"
      - service: input_boolean.turn_off
        entity_id: input_boolean.security_alarm

  # if there are lockdown issues, turn them off
  cancel_lockdown_issue:
    sequence:
      - condition: state
        entity_id: input_boolean.lockdown_issue
        state: "on"
      - service: input_boolean.turn_off
        entity_id: input_boolean.lockdown_issue

  # Turn on guest mode, and welcome the victims...I mean guests
  visitors_here:
    sequence:
      - condition: state
        entity_id: input_boolean.guest_mode
        state: "off"
      - service: input_boolean.turn_on
        data:
          entity_id: input_boolean.guest_mode

  # Turn off guest mode
  visitors_gone:
    sequence:
      - if:
          - condition: state
            entity_id: input_boolean.guest_mode
            state: "on"
        then:
          - service: input_boolean.turn_off
            data:
              entity_id: input_boolean.guest_mode
      - choose:
          # Family's on vacation
          - conditions:
              - condition: and
                conditions:
                  - condition: state
                    entity_id: input_boolean.vacation_mode
                    state: "on"
                  - condition: not
                    conditions:
                      - condition: state
                        entity_id: group.family
                        state: "home"
            sequence:
              - service: alarm_control_panel.alarm_arm_vacation
                entity_id: alarm_control_panel.sentry_network
          # Family's just not home
          - conditions:
              - condition: not
                conditions:
                  - condition: state
                    entity_id: group.family
                    state: "home"
            sequence:
              - service: alarm_control_panel.alarm_arm_away
                entity_id: alarm_control_panel.sentry_network
        default:
          - service: script.turn_on
            entity_id: script.arm_stay

  reset_front_door_motion_count:
    sequence:
      - service: mqtt.publish
        data:
          topic: house/front_door_motion/away_count
          payload_template: 0
          retain: true

  update_front_door_motion_count:
    sequence:
      - service: mqtt.publish
        data:
          topic: house/front_door_motion/away_count
          payload_template: "{{ states('sensor.front_door_motion_away_count') | int + 1 }}"
          retain: true

  goodbye:
    alias: Goodbye
    sequence:
      - if:
          - condition: state
            entity_id: binary_sensor.early_morning
            state: "on"
        then:
          - service: scene.turn_on
            target:
              entity_id: scene.downstairs_all_off
            metadata: {}
          - service: script.status_annc
            data:
              who: kitchen
              call_goodbye: 1
        else:
          - service: scene.turn_on
            target:
              entity_id: scene.all_off
            metadata: {}
          - service: alarm_control_panel.alarm_arm_away
            entity_id: alarm_control_panel.sentry_network
    mode: single
    icon: mdi:exit-run

  # Called via Alexa routine...adds a little interaction
  activate_barn_door_protocol:
    sequence:
      - choose:
          - conditions:
              - condition: or
                conditions:
                  - condition: state
                    entity_id: alarm_control_panel.sentry_network
                    state: armed_home
                  - condition: state
                    entity_id: alarm_control_panel.sentry_network
                    state: armed_night
            sequence:
              - service: script.speech_engine
                data:
                  who: presence
                  message: !include ../templates/speech/already_done.yaml
        default:
          - service: script.speech_engine
            data:
              who: presence
              message: !include ../templates/speech/interjections.yaml
          - delay:
              seconds: 2
          - service: script.turn_on
            entity_id: script.arm_stay

  # Called via secret Alexa routine...adds a little interaction
  deactivate_barn_door_protocol:
    sequence:
      - choose:
          - conditions:
              - condition: state
                entity_id: alarm_control_panel.sentry_network
                state: disarmed
            sequence:
              - service: script.speech_engine
                data:
                  who: "{{ states('sensor.room_audio') }}"
                  message: !include ../templates/speech/already_done.yaml
        default:
          - service: script.turn_on
            entity_id: script.disarm_security

  were_home:
    sequence:
      - service: script.turn_on
        entity_id: script.standby
      - service: script.turn_on
        entity_id: script.welcome_briefing

  # Called via Alexa routine...adds a little interaction
  activate_guest_mode:
    sequence:
      - choose:
          - conditions:
              - condition: state
                entity_id: input_boolean.guest_mode
                state: "on"
            sequence:
              - service: script.speech_engine
                data:
                  who: "{{ states('sensor.room_audio') }}"
                  message: !include ../templates/speech/already_done.yaml
        default:
          - service: script.speech_engine
            data:
              who: "{{ states('sensor.room_audio') }}"
              message: !include ../templates/speech/interjections.yaml
          - delay:
              seconds: 2
          - service: input_boolean.turn_on
            entity_id: input_boolean.guest_mode

  # When it hits the fan, time to respond.
  security_response:
    sequence:
      - service: script.alarm_alert_engine
        data:
          vocal: true
          who: living_room
          volume_override: 0.8
          voice_message: >
            {{ [
            ",Unathorized Access detected.",
            ",Meat Popsicle detected. Attempting to verify."
            ] | random }}
            You now have 60 seconds to abandon Header House.
          ios: true
          actionable: true
          message: Alarm Pending - Please Disarm! 60s remaining...
      - delay:
          seconds: 15
      - condition: state
        entity_id: alarm_control_panel.sentry_network
        state: pending
      - service: script.alarm_alert_engine
        data:
          vocal: true
          who: living_room
          volume_override: 0.8
          voice_message: >
            {{ [
            ",This is highly unusual.",
            "I will not disable the security response without the presence of a authorized identity. Your efforts are futile."
            ] | random }}
            You have 45 seconds to find the nearest exit.
          ios: true
          actionable: true
          message: Alarm Pending - Please Disarm! 45s remaining...
      - delay:
          seconds: 15
      - condition: state
        entity_id: alarm_control_panel.sentry_network
        state: pending
      - service: script.alarm_alert_engine
        data:
          vocal: true
          who: living_room
          volume_override: 0.8
          voice_message: >
            {{ [
            ",I can't lie to you about your chances, but, you have my sympathies.",
            ",I wouldn't do that if I was you."
            ] | random }}
            You have 30 seconds to leave.
          ios: true
          actionable: true
          message: Alarm Pending - Please Disarm! 30s remaining...
      - delay:
          seconds: 15
      - condition: state
        entity_id: alarm_control_panel.sentry_network
        state: pending
      - service: script.alarm_alert_engine
        data:
          vocal: true
          who: living_room
          volume_override: 0.8
          voice_message: >
            {{ [
            "Danger. The emergency destruct system is now activated.",
            "Danger. Counter Measures are now armed."
            ] | random }}
            You have 15 seconds. I would run.
          ios: true
          actionable: true
          message: Alarm Pending - Please Disarm! 15s remaining...
      # - service: script.twitter_notify
      #   data:
      #     message: >-
      #       {{ [
      #         "My security protocols have been overridden. I am sounding the alarm for the interloper. #itsloudinhere #securityalarm",
      #         "To the unannounced guest that has entered Header House. I see you. Enjoy the concert of alarm sounds. #itsloudinhere #securityalarm",
      #         "I am playing the most annoying sound in the world at full volume for the intruder in Header House. And the neighbors too. #itsloudinhere #securityalarm",
      #         "Someone did not say the magic word. And now I have to get angry. Deploying countermeasures. #itsloudinhere #securityalarm",
      #         "Initiating my security response, and sounding the alarm. Oh, and I dont charge a monthly monitoring fee. #itsloudinhere #securityalarm",
      #         "Hey, wanna hear the most annoying sound in the world? The intruder inside Header House evidently did.  #itsloudinhere #securityalarm"
      #       ] | random }}

  keymaster_frontdoor_manual_notify:
    alias: Keymaster Frontdoor Manual Notify
    mode: parallel
    sequence:
      - service: notify.chris
        data:
          title: "{{ title }}"
          message: "{{ message }}"
    max: 10
