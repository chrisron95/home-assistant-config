# yamllint disable
############  input_number:  #####################
input_number:
  accesscount_frontdoor_10:
    name: "Unlock events"
    min: 0
    max: 100
    step: 1
    mode: box

#################  input_datetime:  ##############
input_datetime:
  end_date_frontdoor_10:
    name: "End"
    has_time: true
    has_date: true
  start_date_frontdoor_10:
    name: "Start"
    has_time: true
    has_date: true

  sun_start_date_frontdoor_10:
    name: "Start"
    has_time: true
    has_date: false
  sun_end_date_frontdoor_10:
    name: "End"
    has_time: true
    has_date: false

  mon_start_date_frontdoor_10:
    name: "Start"
    has_time: true
    has_date: false
  mon_end_date_frontdoor_10:
    name: "End"
    has_time: true
    has_date: false

  tue_start_date_frontdoor_10:
    name: "Start"
    has_time: true
    has_date: false
  tue_end_date_frontdoor_10:
    name: "End"
    has_time: true
    has_date: false

  wed_start_date_frontdoor_10:
    name: "Start"
    has_time: true
    has_date: false
  wed_end_date_frontdoor_10:
    name: "End"
    has_time: true
    has_date: false

  thu_start_date_frontdoor_10:
    name: "Start"
    has_time: true
    has_date: false
  thu_end_date_frontdoor_10:
    name: "End"
    has_time: true
    has_date: false

  fri_start_date_frontdoor_10:
    name: "Start"
    has_time: true
    has_date: false
  fri_end_date_frontdoor_10:
    name: "End"
    has_time: true
    has_date: false

  sat_start_date_frontdoor_10:
    name: "Start"
    has_time: true
    has_date: false
  sat_end_date_frontdoor_10:
    name: "End"
    has_time: true
    has_date: false

####################  input_text:  ###############
input_text:
  frontdoor_name_10:
    name: "Name"
  frontdoor_pin_10:
    name: "PIN"
    mode: text

#################  input_boolean: ################
input_boolean:
  notify_frontdoor_10:
    name: "Notifications"
  daterange_frontdoor_10:
    name: "Use Date Range"
  enabled_frontdoor_10:
    name: "Enabled"
  accesslimit_frontdoor_10:
    name: "Enforce PIN limit"
  reset_codeslot_frontdoor_10:
    name: "Reset Code Slot"

  sun_frontdoor_10:
    name: "Sunday"

  mon_frontdoor_10:
    name: "Monday"

  tue_frontdoor_10:
    name: "Tuesday"

  wed_frontdoor_10:
    name: "Wednesday"

  thu_frontdoor_10:
    name: "Thursday"

  fri_frontdoor_10:
    name: "Friday"

  sat_frontdoor_10:
    name: "Saturday"

  sun_inc_frontdoor_10:
    name: "include (on)/exclude (off)"

  mon_inc_frontdoor_10:
    name: "include (on)/exclude (off)"

  tue_inc_frontdoor_10:
    name: "include (on)/exclude (off)"

  wed_inc_frontdoor_10:
    name: "include (on)/exclude (off)"

  thu_inc_frontdoor_10:
    name: "include (on)/exclude (off)"

  fri_inc_frontdoor_10:
    name: "include (on)/exclude (off)"

  sat_inc_frontdoor_10:
    name: "include (on)/exclude (off)"

################  automation: #################
automation:
  - alias: turn_on_access_limit_frontdoor_10
    id: turn_on_access_limit_frontdoor_10
    trigger:
      platform: state
      entity_id: input_number.accesscount_frontdoor_10
    condition:
      - condition: template
        value_template: >-
          {{ (states('input_number.accesscount_frontdoor_10') | int > 0) }}
    action:
      service: input_boolean.turn_on
      target:
        entity_id: input_boolean.accesslimit_frontdoor_10

  - alias: synchronize_codeslot_frontdoor_10
    id: synchronize_codeslot_frontdoor_10
    initial_state: true
    mode: single
    max_exceeded: silent
    trigger:
      - platform: state
        entity_id: "binary_sensor.pin_synched_frontdoor_10"
        from: "on"
        to: "off"
    condition:
      - condition: template
        value_template: >-
          {{ states("sensor.frontdoor_code_slot_10") != "unavailable" }}
    action:
      - choose:
          # The code should be added to the lock's slot
          - conditions:
              - condition: template
                value_template: "{{ is_state('binary_sensor.active_frontdoor_10','on') }}"
            sequence:
              - service: keymaster.add_code
                data_template:
                  entity_id: lock.touchscreen_deadbolt_z_wave_plus_frontdoor
                  code_slot: >-
                    {{ 10 }}
                  usercode: >-
                    {{ states('input_text.frontdoor_pin_10').strip() }}

          # The code should be removed from the lock's slot
          - conditions:
              - condition: template
                value_template: "{{ is_state('binary_sensor.active_frontdoor_10','off') }}"
            sequence:
              - service: keymaster.clear_code
                data_template:
                  entity_id: lock.touchscreen_deadbolt_z_wave_plus_frontdoor
                  code_slot: >-
                    {{ 10 }}

################  binary_sensor: #################
binary_sensor:
  - platform: template
    sensors:
      active_frontdoor_10:
        friendly_name: "Desired PIN State"
        value_template: >-
          {## This template checks whether the PIN should be considered active based on ##}
          {## all of the different ways the PIN can be conditionally enabled/disabled ##}

          {## Get current date and time ##}
          {% set now = now() %}

          {## Get current day of week, date (integer yyyymmdd), and time (integer hhmm) ##}
          {% set current_day = now.strftime('%a')[0:3] | lower %}
          {% set current_date = now.strftime('%Y%m%d') | int %}
          {% set current_time = now.strftime('%H%M') | int %}
          {% set current_timestamp = as_timestamp(now) | int %}

          {## Get whether date range toggle is enabled as well as start and end date (integer yyyymmdd) ##}
          {## Determine whether current date is within date range using integer (yyyymmdd) comparison ##}
          {% set is_date_range_enabled = is_state('input_boolean.daterange_frontdoor_10', 'on') %}
          {% set start_date = state_attr('input_datetime.start_date_frontdoor_10', 'timestamp') | int %}
          {% set end_date = state_attr('input_datetime.end_date_frontdoor_10', 'timestamp') | int %}

          {## Only active if within the full datetime range. To get a single day both start and stop times must be set ##}
          {% set is_in_date_range = (start_date < end_date and current_timestamp >= start_date and current_timestamp <= end_date) %}

          {## Get current days start and end time (integer hhmm). Assume time range is considered enabled if start time != end time. ##}
          {## If time range is inclusive, check if current time is between start and end times. If exclusive, check if current time is before start time or after end time. ##}
          {% set current_day_start_time = (states('input_datetime.' + current_day + '_start_date_frontdoor_10')[0:5]).replace(':', '') | int %}
          {% set current_day_end_time = (states('input_datetime.' + current_day + '_end_date_frontdoor_10')[0:5]).replace(':', '') | int %}
          {% set is_time_range_enabled = (current_day_start_time != current_day_end_time) %}
          {% set is_time_range_inclusive = is_state('input_boolean.' + current_day + '_inc_frontdoor_10', 'on') %}
          {% set is_in_time_range = (
            (is_time_range_inclusive and (current_time >= current_day_start_time and current_time <= current_day_end_time))
            or
            (not is_time_range_inclusive and (current_time < current_day_start_time or current_time > current_day_end_time))
          ) %}

          {## Get whether code slot is active and current day is enabled ##}
          {% set is_slot_enabled = is_state('input_boolean.enabled_frontdoor_10', 'on') %}
          {% set is_current_day_enabled = is_state('input_boolean.' + current_day + '_frontdoor_10', 'on') %}

          {## Check if access limit is enabled and if there are access counts left. ##}
          {% set is_access_limit_enabled = is_state('input_boolean.accesslimit_frontdoor_10', 'on') %}
          {% set is_access_count_valid = states('input_number.accesscount_frontdoor_10') | int > 0 %}

          {## Code slot is active if slot is enabled + current day is enabled + date range is not enabled or current date is within date range ##}
          {## + time range is not enabled or current time is within time range (based on include/exclude) + access limit is not enabled or there are more access counts left ##}
          {{
            is_slot_enabled and is_current_day_enabled
            and
            (not is_date_range_enabled or is_in_date_range)
            and
            (not is_time_range_enabled or is_in_time_range)
            and
            (not is_access_limit_enabled or is_access_count_valid)
          }}

      pin_synched_frontdoor_10:
        friendly_name: "PIN synchronized with lock"
        value_template: >
          {% set lockpin = states('sensor.frontdoor_code_slot_10').strip()  %}
          {% set localpin = states('input_text.frontdoor_pin_10').strip()  %}
          {% set pin_active = is_state('binary_sensor.active_frontdoor_10', 'on')  %}
          {% if lockpin == "0000" %}
          {%   set lockpin = "" %}
          {% endif %}
          {% if pin_active %}
            {{ localpin == lockpin }}
          {% else %}
            {{ lockpin == "" }}
          {% endif %}

###################  sensor:  ####################
sensor:
  - platform: template
    sensors:
      connected_frontdoor_10:
        friendly_name: "PIN Status"
        value_template: >-
          {% set pin_active = is_state('binary_sensor.active_frontdoor_10', 'on')  %}      
          {% set synched = is_state('binary_sensor.pin_synched_frontdoor_10', 'on')  %}      
          {% if pin_active %}
            {% if synched %}
              Connected
            {% else %}
              Adding
            {% endif %}
          {% else %}
            {% if synched %}
              Disconnected
            {% else %}
              Deleting
            {% endif %}
          {% endif %}
        icon_template: >
          {% set pin_active = is_state('binary_sensor.active_frontdoor_10', 'on')  %}      
          {% set synched = is_state('binary_sensor.pin_synched_frontdoor_10', 'on')  %}      
          {% if pin_active %}
            {% if synched %}
              mdi:folder-key
            {% else %}
              mdi:folder-key-network
            {% endif %}
          {% else %}
            {% if synched %}
              mdi:folder-open
            {% else %}
              mdi:wiper-wash
            {% endif %}
          {% endif %}
